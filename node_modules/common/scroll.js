'use strict'
;(function () {
  var $ = require('jquery')
  var Scroll = function (box, args) {
    if (!box) {return}
    this.jBox = $(box);
    this.handleCfg(args || {});
    this.ini();
    this.jBox.data('scroller', this);
    return this;
  };
  
  Scroll.prototype = {
    config: {
      scrollX: false,
      scrollY: true,
      wheelSpeed: 60
    },
    handleCfg: function (args) {
      this.cfg = $.extend({}, this.cfg || this.config, args);
    },
    create: function () {
      this.jBox.wrap('<div class="cmScroller"></div>');
      this.jWrapper = this.jBox.parent();
      
      this.getRect();
      
      this.createScroll();
      this.currentX = 0;
      this.currentY = 0;
      this.bind();
    },
    getRect: function () {
      var h = this.jBox.height(),
          w = this.jBox.width();
      this.jWrapper.width(w).height(h);
      this.jBox.css({
        overflow: 'visible',
        position: 'absolute',
        width: 'auto',
        height: 'auto',
        top: 0,
        left: 0
      });
    },
    createScroll: function () {
      var cfg = this.cfg;
      this.jWrapper.append(
        '<div class="scroll-x">' + 
          '<div class="bar"></div>' +
        '</div>' + 
        '<div class="scroll-y">' +
          '<div class="bar"></div>' +
        '</div>'
      );
      this.setDetail();
    },
    setDetail: function () {
      var cfg = this.cfg;
      this.jScrollX = this.jWrapper.find('.scroll-x');
      this.jScrollY = this.jWrapper.find('.scroll-y');
      
      if (this.cfg.scrollX && this.cfg.scrollY) {
        var scrollXWidth = this.jScrollX.width(),
            scrollXHeight = this.jScrollX.height(),
            scrollYWidth = this.jScrollY.width(),
            scrollYHeight = this.jScrollY.height();
        this.jScrollX.width(scrollXWidth - scrollYWidth);
        this.jScrollY.height(scrollYHeight - scrollXHeight);
      }
      
      var w = this.jWrapper.width(),
          h = this.jWrapper.height(),
          ww = this.jBox.width(),
          hh = this.jBox.height();
      if (this.jScrollX[0]) {
        this.jScrollX.find('.bar').css('width', Math.ceil(w / ww * 100) + '%');
        this.xDistance = this.jScrollX.width() - this.jScrollX.find('.bar').width();
        this.xBoxDistance = ww - w;
      }
      if (this.jScrollY[0]) {
        this.jScrollY.find('.bar').css('height', Math.ceil(h / hh * 100) + '%');
        this.yDistance = this.jScrollY.height() - this.jScrollY.find('.bar').height();
        this.yBoxDistance = hh - h;
      }
      
      if (w / ww >= 1) {
        this.jScrollX.hide();
      }
      if (h / hh >= 1) {
        this.jScrollY.hide();
      }
      
      if (!this.cfg.scrollX) {
        this.jScrollX.remove();
      } else if (!this.cfg.scrollY) {
        this.jScrollY.remove();
      }
    },
    refresh: function (args) {
      this.currentX = 0;
      this.currentY = 0;
      this.jScrollX[0] && this.jScrollX.remove();
      this.jScrollY[0] && this.jScrollY.remove();
      this.handleCfg(args || {});
      this.createScroll();
      this.scrollTo(0, 0);
      return this;
    },
    update: function (args) {
      this.jScrollX[0] && this.jScrollX.remove();
      this.jScrollY[0] && this.jScrollY.remove();
      this.handleCfg(args || {});
      this.createScroll();
      var x = this.currentX,
          y = this.currentY;
      x = -x >= this.xBoxDistance ? -this.xBoxDistance : x;
      y = -y >= this.yBoxDistance ? -this.yBoxDistance : y;
      this.scrollTo(x, y);
      /*********可能有坑************
        场景：垂直滚动情况下
              1 - 滑动至底
              2 - 扩大内容区域
              3 - 执行resize
        预期：滚动条在底部
        结果：滚动条距离底部有5px左右*/
      return this;
    },
    resize: function (args) {
      this.getRect();
      this.update(args);
      return this
    },
    bind: function () {
      var that = this;
      $(document).bind('mouseup', function () {
        that.isScrollAble = false;
      });
      this.jWrapper.bind('mousedown', '.scroll-x .bar, .scroll-y .bar', function (e) {
        e = e || window.event;
        e.preventDefault();
        that.isScrollAble = true;
        that.startX = e.clientX;
        that.startY = e.clientY;
        that.checkDir(this);
      });
      
      var event = typeof document.onmousewheel !== 'undefined' ? 'mousewheel' : 'DOMMouseScroll';
      this.jWrapper.bind(event, function (e) {
        if (!that.cfg.scrollY) {return}
        if (that.jBox.outerHeight(true) <= that.jWrapper.height()) {return}
        var dir = (e.originalEvent.wheelDelta) ? e.originalEvent.wheelDelta / 120 : -(e.originalEvent.detail || 0) / 3;
        var delta = that.currentY + dir * that.cfg.wheelSpeed;
        if ((dir < 0 && that.currentY !== -that.yBoxDistance) || (that.currentY !== 0 && dir > 0)) {
          e.preventDefault();
          delta = -delta > that.yBoxDistance ? -that.yBoxDistance : (delta > 0 ? 0 : delta);
          that.scrollYTo(delta);
          that.currentDir = 'y';
          //that.moveBar(-delta / that.yBoxDistance * that.yDistance);
        }
      });
      
      $(document).bind('mousemove', function (e) {
        e = e || window.event;
        if (that.isScrollAble) {
          e.preventDefault();
          that.deltaX = e.clientX - that.startX;
          that.deltaY = e.clientY - that.startY;
          var num = 0
          if (that.currentDir === 'x') {
            num = that.startPosition + that.deltaX;
            num = num > that.xDistance ? that.xDistance : (num <= 0 ? 0 : num);
            that.scrollXTo(-num / that.xDistance * that.xBoxDistance);
          } else {
            var num = that.startPosition + that.deltaY;
            num = num > that.yDistance ? that.yDistance : (num <= 0 ? 0 : num);
            that.scrollYTo(-num / that.yDistance * that.yBoxDistance);
          }
          //that.moveBar(num);
        }
      });
    },
    checkDir: function (obj) {
      this.currentDir = $(obj).parent('.scroll-x')[0] ? 'x' : 'y';
      if (this.currentDir === 'x') {
        this.startPosition = this.jScrollX.find('.bar').position().left;
      } else {
        this.startPosition = this.jScrollY.find('.bar').position().top;
      }
    },
    moveBar: function (num) {
      if (this.currentDir === 'x') {
        this.jScrollX.find('.bar').css('left', num + 'px');
      } else {
        this.jScrollY.find('.bar').css('top', num + 'px');
      }
    },
    scrollXTo: function (x) {
      if (this.cfg.scrollX) {
        x = x > 0 ? 0 : (-x > this.xBoxDistance ? -this.xBoxDistance : x);
        this.jBox.css({
          left: x
        });
        this.currentX = x;
        this.moveBar(-x * this.xDistance / this.xBoxDistance);
      }
    },
    scrollYTo: function (y) {
      if (this.cfg.scrollY) {
        y = y >= 0 ? 0 : (-y > this.yBoxDistance ? -this.yBoxDistance : y);
        this.jBox.css({
          top: y
        });
        this.currentY = y;
        this.moveBar(-y * this.yDistance / this.yBoxDistance);
      }
    },
    scrollTo: function (x, y) {
      this.scrollXTo(x);
      this.scrollYTo(y);
    },
    //create for yixunfe-tool-box
    scrollToBottom: function () {
      if (!this.cfg.scrollY) {return}
      this.scrollYTo(-this.yBoxDistance)
    },
    ini: function () {
      this.create();
    }
  };
  
  var scroll = (function () {
    return function (box, args) {
      return new Scroll(box, args)
    };
  }());
  
  module.exports = scroll
  
}());
